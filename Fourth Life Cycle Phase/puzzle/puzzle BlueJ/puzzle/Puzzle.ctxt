#BlueJ class context
comment0.target=Puzzle
comment0.text=\r\n\ Tilting\ Tiles\ is\ a\ game\ inspired\ by\ Problem\ F\ from\ the\ 2023\ International\ Programming\ Marathon,\ which\ tests\ a\ gummy\ glue.\r\n\r\n\ @author\ Botero\ Garcia,\ Santiago.\ Perilla\ Quintero,\ Laura\ Natalia.\r\n\ @version\ October\ 26\ 2024\r\n
comment1.params=h\ w
comment1.target=Puzzle(int,\ int)
comment1.text=\r\n\ Create\ a\ puzzle\ given\ the\ dimentions\ of\ the\ board\r\n\ @param\ h\ \ \ \ \ Rows\ of\ the\ board.\r\n\ @param\ w\ \ \ \ \ Columns\ of\ the\ board.\r\n
comment10.params=row\ column
comment10.target=void\ deleteTile(int,\ int)
comment10.text=\r\n\ Deletes\ an\ existing\ tile\ on\ the\ board\r\n\ @param\ row\ \ \ \ \ \ \ Row\ of\ the\ tile\ to\ delete.\r\n\ @param\ column\ \ \ \ Column\ of\ the\ tile\ to\ delete.\r\n
comment11.params=from\ to
comment11.target=void\ relocateTile(int[],\ int[])
comment11.text=\r\n\ Changes\ the\ position\ of\ a\ tile\r\n\ @param\ from\ \ \ \ \ \ Ordered\ pair\ indicating\ the\ position\ where\ the\ tile\ is\ positioned.\r\n\ @param\ to\ \ \ \ \ \ \ \ Ordered\ pair\ indicating\ the\ position\ where\ the\ tile\ will\ move.\r\n
comment12.params=row\ column\ difference
comment12.target=glueMovablePositions(int,\ int,\ int[])
comment12.text=\r\n\ Makes\ a\ temporary\ matrix\ without\ the\ tiles\ with\ glue\ and\ its\ adjacents.\r\n\ @returns\ \ \ \ \ The\ actual\ matrix\ without\ glued\ tiles\ and\ adjacents.\r\n
comment13.params=from\ to
comment13.target=void\ relocateTileVerification(int[],\ int[])
comment13.text=\r\n\ Verifies\ if\ a\ tile\ can\ be\ relocated.\r\n
comment14.params=row\ column
comment14.target=void\ addGlue(int,\ int)
comment14.text=\r\n\ Adds\ glue\ to\ a\ tile.\r\n\ @param\ row\ \ \ \ \ \ \ Row\ of\ the\ tile.\r\n\ @parama\ column\ \ \ Column\ of\ the\ tile.\r\n
comment15.params=type\ row\ column
comment15.target=void\ addGlue(java.lang.String,\ int,\ int)
comment15.text=\r\n\ Adds\ glue\ of\ a\ specified\ type\ to\ the\ board\ at\ the\ given\ row\ and\ column.\r\n\ \r\n\ @param\ type\ \ \ \ \ The\ type\ of\ the\ glue\ to\ be\ added\ (e.g.,\ "normal",\ "super",\ "fragile").\r\n\ @param\ row\ \ \ \ \ \ Row\ of\ the\ tile.\r\n\ @param\ column\ \ \ Column\ of\ the\ tile.\ \r\n\ @throws\ BoardExceptions\ If\ the\ specified\ position\ is\ out\ of\ bounds\ or\ if\ the\ position\ is\ empty.\r\n\ @throws\ GlueExceptions\ If\ the\ glue\ operation\ fails\ (not\ specified\ in\ the\ method).\r\n\ @throws\ TileExceptions\ If\ the\ operation\ fails\ due\ to\ issues\ with\ the\ tiles\ (not\ specified\ in\ the\ method).\r\n
comment16.params=row\ column
comment16.target=void\ deleteGlue(int,\ int)
comment16.text=\r\n\ Deletes\ glue\ from\ a\ tile\r\n\ @param\ row\ \ \ \ \ \ \ Row\ of\ the\ tile.\r\n\ @parama\ column\ \ \ Column\ of\ the\ tile.\r\n
comment17.params=direction
comment17.target=void\ tilt(char)
comment17.text=\r\n\ Move\ the\ tiles\ to\ the\ given\ direction\r\n\ @param\ direction\ \ \ \ \ Must\ be\ u(p),\ l(eft),\ d(own),\ r(ight).\r\n
comment18.params=
comment18.target=void\ tilt()
comment18.text=\r\n\ Overloads\ the\ method\ tilt(char\ direction)\ that\ does\ an\ optimal\ tilt\r\n
comment19.params=rows\ columns\ operation
comment19.target=void\ moveHorizontal(int,\ int,\ char)
comment19.text=\r\n\ Moves\ the\ tiles\ horizontally\r\n\ @param\ rows\ \ \ \ \ \ \ \ \ \ Rows\ of\ the\ board\r\n\ @param\ columns\ \ \ \ \ \ \ Columns\ of\ the\ board\r\n\ @param\ operation\ \ \ \ \ Direction\ in\ which\ the\ tiles\ will\ be\ tilted\r\n
comment2.params=ending
comment2.target=Puzzle(char[][])
comment2.text=\r\n\ Stores\ the\ ending\ puzzle\ given\ an\ array\r\n\ @param\ ending\ \ \ \ Ending\ matrix/Goal.\r\n
comment20.params=rows\ columns\ operation
comment20.target=void\ moveVertical(int,\ int,\ char)
comment20.text=\r\n\ Moves\ the\ tiles\ vertically\r\n\ @param\ rows\ \ \ \ \ \ \ \ \ \ Rows\ of\ the\ board\r\n\ @param\ columns\ \ \ \ \ \ \ Columns\ of\ the\ board\r\n\ @param\ operation\ \ \ \ \ Direction\ in\ which\ the\ tiles\ will\ be\ tilted\r\n
comment21.params=
comment21.target=char[][]\ tempMatrix()
comment21.text=\r\n\ Gets\ the\ actual\ matrix\ without\ the\ adjacent\ tiles\ of\ glued\ tiles\r\n\ @return\ \ The\ actual\ matrix\ with\ the\ glued\ tiles\ and\ non-glued\ tiles\ that\ are\ not\ adjacent\ to\ glued\ tiles.\r\n
comment22.params=
comment22.target=boolean\ isGoal()
comment22.text=\r\n\ Compares\ the\ current\ state\ of\ the\ matrix\ with\ the\ ending\ matrix.\r\n\ @return\ \ \ \ \ \ If\ starting\ matrix\ equals\ the\ ending\ matrix,\ returns\ True.\r\n
comment23.params=
comment23.target=char[][]\ getEndingMatrix()
comment23.text=\r\n\ Gets\ the\ ending\ matrix.\r\n\ @return\ \ \ \ \ \ Returns\ the\ ending\ matrix\ in\ a\ two-dimensional\ array\ of\ characters.\r\n
comment24.params=
comment24.target=char[][]\ actualArrangement()
comment24.text=\r\n\ Gets\ the\ actual\ state\ of\ the\ matrix\r\n\ @return\ \ \ \ \ \ Returns\ the\ current\ matrix\ in\ a\ two-dimensional\ array\ of\ characters.\r\n
comment25.params=
comment25.target=int[][]\ fixedTiles()
comment25.text=\r\n\ Gets\ the\ coordinates\ of\ fixed\ tiles\r\n\ @return\ \ An\ array\ of\ tuples/coordinates.\r\n
comment26.params=
comment26.target=int\ misplacedTiles()
comment26.text=\r\n\ Gets\ the\ amount\ of\ misplaced\ tiles\r\n\ @return\ \ An\ Integer\ meaning\ the\ amount\ of\ misplaced\ tiles.\r\n
comment27.params=
comment27.target=void\ makeVisible()
comment27.text=\r\n\ Make\ the\ puzzle\ visible\r\n
comment28.params=
comment28.target=void\ makeInvisible()
comment28.text=\r\n\ Make\ the\ puzzle\ invisible\r\n
comment29.params=
comment29.target=void\ finish()
comment29.text=\r\n\ Closes\ the\ current\ window\r\n
comment3.params=ending
comment3.target=void\ ConstructorVerification(char[][])
comment3.text=\r\n\ Verifies\ the\ validity\ of\ the\ ending\ matrix\ during\ the\ construction\ of\ the\ Puzzle.\r\n\r\n\ @param\ ending\ The\ ending\ matrix\ that\ needs\ to\ be\ verified.\r\n\ @throws\ PuzzleExceptions\ If\ the\ ending\ matrix\ is\ null\ or\ if\ the\ columns\ in\ the\ ending\ matrix\ do\ not\ have\ the\ same\ length.\r\n
comment30.params=
comment30.target=void\ exchange()
comment30.text=\r\n\ Exchanges\ the\ reference\ board\ (endingMatrix)\ with\ the\ editing\ board\ (matrix).\r\n
comment31.params=row\ column
comment31.target=void\ makeHole(int,\ int)
comment31.text=\r\n\ Creates\ a\ hole\ at\ the\ specified\ empty\ cell\ in\ the\ puzzle.\r\n\ @param\ row\ \ \ \ \ \ \ Row\ of\ the\ board\r\n\ @param\ column\ \ \ \ Column\ of\ the\ board\r\n
comment32.params=currentState\ tileList
comment32.target=void\ setArrangement(char[][],\ java.util.HashMap)
comment32.text=\r\n\ Changes\ the\ actual\ state\ of\ the\ board\ to\ the\ given\ arrangement.\r\n\ @param\ currentState\ \ \ \ \ \ The\ arrangement\ in\ which\ the\ actual\ matrix\ will\ be\ changed.\r\n
comment4.params=starting\ ending
comment4.target=Puzzle(char[][],\ char[][])
comment4.text=\r\n\ Create\ the\ starting\ puzzle\ and\ the\ ending\ puzzle\ given\ a\ pair\ of\ arrays\r\n\ @param\ starting\ \ \ \ \ \ Starting\ matrix.\r\n\ @param\ ending\ \ \ \ \ \ \ \ Ending\ matrix/Goal.\r\n
comment5.params=starting\ ending
comment5.target=void\ ConstructorVerification(char[][],\ char[][])
comment5.text=\r\n\ Verifies\ the\ validity\ of\ the\ starting\ and\ ending\ matrices\ during\ the\ construction\ of\ the\ Puzzle.\r\n\ @param\ starting\ The\ starting\ matrix\ that\ needs\ to\ be\ verified.\r\n\ @param\ ending\ \ \ The\ ending\ matrix\ that\ needs\ to\ be\ verified.\r\n\ @throws\ PuzzleExceptions\ If\ either\ matrix\ is\ null,\ if\ the\ columns\ in\ either\ matrix\ do\ not\ have\ the\ same\ length,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ or\ if\ the\ starting\ and\ ending\ matrices\ have\ different\ dimensions.\r\n
comment6.params=array
comment6.target=boolean\ ColumnsLength(char[][])
comment6.text=\r\n\ Checks\ if\ all\ columns\ in\ the\ nested\ array\ are\ the\ same\ length.\r\n\ @return\ \ {true}\ if\ all\ lengths\ are\ the\ same;\ {false}\ if\ otherwise.\r\n
comment7.params=
comment7.target=void\ colorMap()
comment7.text=\r\n\ Store\ key-value\ pairs\ of\ colors\r\n
comment8.params=row\ column\ color
comment8.target=void\ addTile(int,\ int,\ java.lang.String)
comment8.text=\r\n\ Adds\ a\ tile\ on\ the\ board\r\n\ @param\ row\ \ \ \ \ \ \ Row\ where\ the\ tile\ would\ be\ added.\r\n\ @param\ column\ \ \ \ Column\ where\ the\ tile\ would\ be\ added.\r\n\ @param\ color\ \ \ \ \ Color\ of\ the\ tile\ (must\ be\ red,\ yellow,\ blue,\ green\ or\ magenta).\r\n
comment9.params=type\ row\ column\ color
comment9.target=void\ addTile(java.lang.String,\ int,\ int,\ java.lang.String)
comment9.text=\r\n\ Adds\ a\ tile\ of\ a\ specified\ type\ and\ color\ to\ the\ board\ at\ the\ given\ row\ and\ column.\r\n\ @param\ type\ \ \ \ The\ type\ of\ the\ tile\ to\ be\ added\ (e.g.,\ "normal",\ "fixed",\ "rough",\ "freelance",\ "flying",\ "sticky").\r\n\ @param\ row\ \ \ \ \ \ \ Row\ where\ the\ tile\ would\ be\ added.\r\n\ @param\ column\ \ \ \ Column\ where\ the\ tile\ would\ be\ added.\r\n\ @param\ color\ \ \ \ \ Color\ of\ the\ tile\ (must\ be\ red,\ yellow,\ blue,\ green\ or\ magenta).\r\n\ @throws\ BoardExceptions\ If\ the\ board\ operation\ fails\ (not\ specified\ in\ the\ method).\r\n\ @throws\ PuzzleExceptions\ If\ the\ color\ is\ invalid\ (not\ present\ in\ the\ color\ map).\r\n\ @throws\ TileExceptions\ If\ the\ tile\ type\ provided\ is\ not\ valid.\r\n
numComments=33
