#BlueJ class context
comment0.target=Board
comment0.text=\r\n\ The\ Board\ class\ represents\ a\ game\ board\ that\ contains\ tiles\ and\ holes.\r\n\r\n\ @author\ Botero\ Garcia,\ Santiago.\ Perilla\ Quintero,\ Laura\ Natalia.\r\n\ @version\ October\ 28\ 2024\r\n
comment1.params=h\ w\ xPosition\ yPosition\ board
comment1.target=Board(int,\ int,\ int,\ int,\ char)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ the\ Board\ class.\r\n\ \r\n\ @param\ h\ The\ number\ of\ rows\ in\ the\ board.\r\n\ @param\ w\ The\ number\ of\ columns\ in\ the\ board.\r\n\ @param\ xPosition\ The\ x\ position\ of\ the\ board\ on\ the\ interface.\r\n\ @param\ yPosition\ The\ y\ position\ of\ the\ board\ on\ the\ interface.\r\n\ @param\ board\ The\ type\ of\ board\ ('S'\ for\ starting,\ 'E'\ for\ ending).\r\n\ @throws\ BoardExceptions\ If\ there\ is\ an\ error\ in\ the\ position\ or\ dimensions\ of\ the\ board.\r\n
comment10.params=row\ column
comment10.target=boolean\ canThisTileFall(int,\ int)
comment10.text=\r\n\ Checks\ if\ the\ tile\ at\ the\ specified\ position\ can\ fall.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @return\ true\ if\ the\ tile\ can\ fall,\ false\ otherwise.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n
comment11.params=row\ column
comment11.target=boolean\ doesThisPositionHaveHole(int,\ int)
comment11.text=\r\n\ Checks\ if\ there\ is\ a\ hole\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ position\ to\ check.\r\n\ @param\ column\ The\ column\ of\ the\ position\ to\ check.\r\n\ @return\ true\ if\ there\ is\ a\ hole\ at\ that\ position,\ false\ otherwise.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid.\r\n
comment12.params=row\ column
comment12.target=java.lang.String\ getTileColor(int,\ int)
comment12.text=\r\n\ Gets\ the\ color\ of\ the\ tile\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @return\ The\ color\ of\ the\ tile.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n
comment13.params=row\ column\ type
comment13.target=void\ addGlue(int,\ int,\ java.lang.String)
comment13.text=\r\n\ Adds\ glue\ to\ the\ tile\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @param\ type\ The\ type\ of\ glue\ to\ add.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n\ @throws\ GlueExceptions\ If\ there\ is\ an\ error\ related\ to\ the\ glue.\r\n\ @throws\ TileExceptions\ If\ the\ tile\ cannot\ be\ glued.\r\n
comment14.params=row\ column
comment14.target=void\ deleteGlue(int,\ int)
comment14.text=\r\n\ Removes\ the\ glue\ from\ the\ tile\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n\ @throws\ TileExceptions\ If\ there\ is\ an\ error\ when\ trying\ to\ remove\ the\ glue.\r\n
comment15.params=row\ column
comment15.target=void\ makeHole(int,\ int)
comment15.text=\r\n\ Creates\ a\ hole\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ where\ the\ hole\ will\ be\ created.\r\n\ @param\ column\ The\ column\ where\ the\ hole\ will\ be\ created.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ a\ hole\ already\ exists\ at\ that\ position.\r\n\ @throws\ HoleExceptions\ If\ there\ is\ an\ error\ related\ to\ the\ hole.\r\n
comment16.params=
comment16.target=void\ exchange()
comment16.text=\r\n\ Exchanges\ the\ board\ type\ between\ the\ starting\ board\ and\ the\ ending\ board.\r\n
comment17.params=
comment17.target=java.util.HashMap\ tilesPositions()
comment17.text=\r\n\ Gets\ the\ positions\ of\ the\ tiles.\r\n\ \r\n\ @return\ A\ map\ of\ the\ tile\ positions.\r\n
comment18.params=tileMap
comment18.target=void\ changeTiles(java.util.HashMap)
comment18.text=\r\n\ Replaces\ the\ current\ tiles\ in\ the\ board\ with\ a\ new\ set\ of\ tiles.\r\n\ \r\n\ @param\ tileMap\ A\ map\ of\ the\ new\ tiles\ to\ add\ to\ the\ board.\r\n
comment19.params=
comment19.target=void\ makeVisible()
comment19.text=\r\n\ Makes\ the\ board\ visible.\r\n
comment2.params=h\ w\ xPosition\ yPosition
comment2.target=void\ boardVerification(int,\ int,\ int,\ int)
comment2.text=\r\n\ Verifies\ that\ the\ dimensions\ and\ positions\ of\ the\ board\ are\ valid.\r\n\ \r\n\ @param\ h\ The\ number\ of\ rows\ in\ the\ board.\r\n\ @param\ w\ The\ number\ of\ columns\ in\ the\ board.\r\n\ @param\ xPosition\ The\ x\ position\ of\ the\ board\ on\ the\ interface.\r\n\ @param\ yPosition\ The\ y\ position\ of\ the\ board\ on\ the\ interface.\r\n\ @throws\ BoardExceptions\ If\ there\ is\ an\ error\ in\ the\ position\ or\ dimensions\ of\ the\ board.\r\n
comment20.params=
comment20.target=void\ makeInvisible()
comment20.text=\r\n\ Makes\ the\ board\ invisible.\r\n
comment21.params=state
comment21.target=void\ changeTilesVisibility(boolean)
comment21.text=\r\n\ Changes\ the\ visibility\ of\ the\ tiles\ in\ the\ board.\r\n\ \r\n\ @param\ state\ The\ new\ visibility\ state\ (true\ for\ visible,\ false\ for\ invisible).\r\n
comment22.params=
comment22.target=void\ deleteGlueAfterTilt()
comment22.text=\r\n\ Removes\ glue\ from\ tiles\ that\ cannot\ tilt\ after\ a\ tilt\ action.\r\n\ \r\n\ @throws\ puzzle.TileExceptions\ If\ there\ is\ an\ error\ related\ to\ the\ tile.\r\n
comment23.params=row\ column
comment23.target=boolean\ canThisTileBeTilted(int,\ int)
comment23.text=\r\n\ Checks\ if\ the\ tile\ at\ the\ specified\ position\ can\ be\ tilted.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @return\ true\ if\ the\ tile\ can\ be\ tilted,\ false\ otherwise.\r\n\ @throws\ puzzle.BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n
comment3.params=row\ column\ color\ type
comment3.target=void\ addTile(int,\ int,\ java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Adds\ a\ tile\ to\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ where\ the\ tile\ will\ be\ added.\r\n\ @param\ column\ The\ column\ where\ the\ tile\ will\ be\ added.\r\n\ @param\ color\ The\ color\ of\ the\ tile.\r\n\ @param\ type\ The\ type\ of\ tile\ (normal,\ fixed,\ rough,\ etc.).\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ already\ a\ tile\ at\ that\ position.\r\n\ @throws\ TileExceptions\ If\ the\ type\ of\ tile\ is\ invalid.\r\n
comment4.params=row\ column
comment4.target=void\ addTileVerification(int,\ int)
comment4.text=\r\n\ Verifies\ that\ the\ location\ to\ add\ a\ tile\ is\ valid.\r\n\ \r\n\ @param\ row\ The\ row\ where\ the\ tile\ will\ be\ attempted\ to\ be\ added.\r\n\ @param\ column\ The\ column\ where\ the\ tile\ will\ be\ attempted\ to\ be\ added.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ already\ a\ tile\ at\ that\ position.\r\n
comment5.params=row\ column
comment5.target=void\ deleteTile(int,\ int)
comment5.text=\r\n\ Removes\ a\ tile\ from\ the\ board\ at\ the\ specified\ position.\r\n\ \r\n\ @param\ row\ The\ row\ where\ the\ tile\ will\ be\ removed.\r\n\ @param\ column\ The\ column\ where\ the\ tile\ will\ be\ removed.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n\ @throws\ TileExceptions\ If\ the\ tile\ cannot\ be\ removed.\r\n
comment6.params=row\ column
comment6.target=void\ deleteTileVerification(int,\ int)
comment6.text=\r\n\ Verifies\ that\ the\ location\ to\ remove\ a\ tile\ is\ valid.\r\n\ \r\n\ @param\ row\ The\ row\ where\ the\ tile\ will\ be\ attempted\ to\ be\ removed.\r\n\ @param\ column\ The\ column\ where\ the\ tile\ will\ be\ attempted\ to\ be\ removed.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n\ @throws\ TileExceptions\ If\ the\ tile\ cannot\ be\ removed.\r\n
comment7.params=starting\ ending
comment7.target=void\ moveTile(int[],\ int[])
comment7.text=\r\n\ Moves\ a\ tile\ from\ a\ starting\ position\ to\ an\ ending\ position.\r\n\ \r\n\ @param\ starting\ The\ starting\ position\ of\ the\ tile\ (row\ and\ column).\r\n\ @param\ ending\ The\ ending\ position\ of\ the\ tile\ (row\ and\ column).\r\n\ @throws\ BoardExceptions\ If\ there\ is\ an\ error\ in\ the\ location.\r\n\ @throws\ PuzzleExceptions\ If\ there\ is\ a\ puzzle-related\ error.\r\n\ @throws\ TileExceptions\ If\ the\ tile\ cannot\ be\ moved.\r\n
comment8.params=starting\ ending
comment8.target=void\ moveTileVerification(int[],\ int[])
comment8.text=\r\n\ Verifies\ that\ moving\ a\ tile\ is\ valid.\r\n\ \r\n\ @param\ starting\ The\ starting\ position\ of\ the\ tile\ (row\ and\ column).\r\n\ @param\ ending\ The\ ending\ position\ of\ the\ tile\ (row\ and\ column).\r\n\ @throws\ BoardExceptions\ If\ there\ is\ an\ error\ in\ the\ location.\r\n\ @throws\ PuzzleExceptions\ If\ there\ is\ a\ puzzle-related\ error.\r\n\ @throws\ TileExceptions\ If\ the\ tile\ cannot\ be\ moved.\r\n
comment9.params=row\ column
comment9.target=boolean\ doesTileHaveGlue(int,\ int)
comment9.text=\r\n\ Checks\ if\ the\ tile\ at\ the\ specified\ position\ has\ glue.\r\n\ \r\n\ @param\ row\ The\ row\ of\ the\ tile.\r\n\ @param\ column\ The\ column\ of\ the\ tile.\r\n\ @return\ true\ if\ the\ tile\ has\ glue,\ false\ otherwise.\r\n\ @throws\ BoardExceptions\ If\ the\ location\ is\ invalid\ or\ there\ is\ no\ tile\ at\ that\ position.\r\n
numComments=24
