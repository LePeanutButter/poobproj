#BlueJ class context
comment0.target=PuzzleC2Test
comment0.text=\r\n\ The\ test\ class\ PuzzleC2Test.\r\n\r\n\ @author\ Botero\ Garcia,\ Santiago.\ Perilla\ Quintero,\ Laura\ Natalia.\r\n\ @version\ September\ 21\ 2024\r\n
comment1.params=
comment1.target=PuzzleC2Test()
comment1.text=\r\n\ Default\ constructor\ for\ test\ class\ PuzzleC2Test\r\n
comment10.params=
comment10.target=void\ accordingBPShouldThrowExceptionForInvalidTilePosition()
comment10.text=\r\n\ Tests\ if\ an\ exception\ is\ thrown\ when\ trying\ to\ add\ a\ tile\ at\ an\ invalid\ position.\r\n
comment11.params=
comment11.target=void\ accordingBPShouldDeleteTile()
comment11.text=\r\n\ Tests\ if\ a\ tile\ can\ be\ deleted\ from\ the\ puzzle\ at\ a\ valid\ position.\r\n
comment12.params=
comment12.target=void\ accordingBPShouldThrowExceptionForInvalidDeleteTile()
comment12.text=\r\n\ Tests\ if\ an\ exception\ is\ thrown\ when\ trying\ to\ delete\ a\ tile\ from\ an\ invalid\ position.\r\n
comment13.params=
comment13.target=void\ accordingBPShouldRelocateTile()
comment13.text=\r\n\ Tests\ if\ a\ tile\ can\ be\ relocated\ from\ one\ position\ to\ another.\r\n
comment14.params=
comment14.target=void\ accordingBPShouldNotRelocateTileToInvalidPosition()
comment14.text=\r\n\ Tests\ if\ an\ exception\ is\ thrown\ when\ trying\ to\ relocate\ a\ tile\ to\ an\ invalid\ position.\r\n
comment15.params=
comment15.target=void\ accordingBPShouldAddGlue()
comment15.text=\r\n\ Tests\ if\ glue\ can\ be\ added\ to\ a\ tile.\r\n
comment16.params=
comment16.target=void\ accordingBPShouldNotAddGlueToEmptyTile()
comment16.text=\r\n\ Tests\ if\ glue\ is\ not\ added\ to\ an\ empty\ tile.\r\n
comment17.params=
comment17.target=void\ accordingBPShouldDeleteGlueFromTile()
comment17.text=\r\n\ Tests\ if\ glue\ can\ be\ deleted\ from\ a\ tile.\r\n
comment18.params=
comment18.target=void\ accordingBPShouldNotDeleteGlueFromEmptyTile()
comment18.text=\r\n\ Tests\ if\ an\ exception\ is\ thrown\ when\ trying\ to\ delete\ glue\ from\ an\ empty\ tile.\r\n
comment19.params=
comment19.target=void\ accordingBPShouldTilt()
comment19.text=\r\n\ Test\ that\ tilting\ the\ puzzle\ works\ correctly.\r\n
comment2.params=
comment2.target=void\ setUp()
comment2.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment20.params=
comment20.target=void\ accordingBPShouldMakeHole()
comment20.text=\r\n\ Test\ that\ making\ a\ hole\ at\ the\ specified\ position\ updates\ the\ puzzle\ correctly.\r\n\ A\ hole\ is\ represented\ by\ the\ character\ 'H'.\r\n
comment21.params=
comment21.target=void\ accordingBPShouldThrowExceptionForInvalidMakeHole()
comment21.text=\r\n\ Test\ that\ making\ a\ hole\ at\ an\ invalid\ position\ throws\ an\ IllegalArgumentException.\r\n\ Invalid\ positions\ are\ those\ that\ do\ not\ correspond\ to\ an\ empty\ tile.\r\n
comment22.params=
comment22.target=void\ accordingBPShouldExchangeTilesInValidPositions()
comment22.text=\r\n\ Test\ that\ exchanging\ tiles\ in\ valid\ positions\ updates\ the\ arrangement\ correctly.\r\n\ This\ verifies\ that\ the\ current\ arrangement\ is\ swapped\ with\ the\ ending\ matrix.\r\n
comment23.params=
comment23.target=void\ accordingBPShouldReturnTrueWhenCurrentArrangementIsGoal()
comment23.text=\r\n\ Verifies\ that\ the\ current\ arrangement\ of\ the\ puzzle\ is\ correct.\r\n\ This\ ensures\ that\ the\ puzzle\ recognizes\ when\ it\ has\ reached\ the\ desired\ shape.\r\n
comment24.params=
comment24.target=void\ accordingBPShouldReturnActualArrangement()
comment24.text=\r\n\ Verifies\ that\ the\ actual\ arrangement\ of\ the\ puzzle\ matches\ the\ saved\ configuration.\r\n\ This\ ensures\ that\ the\ puzzle's\ current\ state\ is\ consistent\ with\ what\ is\ stored\ in\ actualArrangement.\r\n
comment25.params=
comment25.target=void\ accordingBPShouldMakeVisible()
comment25.text=\r\n\ Test\ that\ making\ the\ puzzle\ visible\ changes\ its\ visibility\ status\ to\ true.\r\n\ This\ ensures\ that\ the\ puzzle\ correctly\ updates\ its\ state\ when\ the\ makeVisible\ method\ is\ called.\r\n
comment26.params=
comment26.target=void\ accordingBPShouldMakeInvisible()
comment26.text=\r\n\ Test\ that\ making\ the\ puzzle\ invisible\ changes\ its\ visibility\ status\ to\ false.\r\n\ This\ ensures\ that\ the\ puzzle\ correctly\ updates\ its\ state\ when\ the\ makeInvisible\ method\ is\ called.\r\n
comment27.params=
comment27.target=void\ accordingBPShouldReturnFixedTiles()
comment27.text=\r\n\ Tests\ that\ the\ fixedTiles()\ method\ returns\ the\ correct\ coordinates\ of\ the\ fixed\ tiles.\r\n
comment28.params=
comment28.target=void\ accordingBPShouldReturnMisplacedTiles()
comment28.text=\r\n\ Tests\ that\ the\ misplacedTiles()\ method\ returns\ the\ correct\ coordinates\ of\ the\ misplaced\ tiles.\r\n
comment29.params=
comment29.target=void\ accordingBPShouldOptimalTilt()
comment29.text=\r\n\ Tests\ that\ the\ tilt()\ method\ performs\ an\ optimal\ move,\ \r\n\ ensuring\ that\ the\ number\ of\ fixed\ tiles\ remains\ the\ same\ or\ increases\ \r\n\ and\ that\ the\ number\ of\ misplaced\ tiles\ remains\ the\ same\ or\ decreases.\r\n
comment3.params=
comment3.target=void\ accordingBPShouldInitializeBoardWithValidDimensions()
comment3.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ initializes\ with\ valid\ dimensions.\r\n\ It\ should\ not\ throw\ any\ exceptions.\r\n
comment30.params=
comment30.target=void\ tearDown()
comment30.text=\r\n\ Cleans\ up\ resources\ used\ by\ the\ tests\ once\ all\ have\ been\ completed.\r\n\ This\ ensures\ that\ any\ windows\ or\ resources\ created\ during\ the\ tests\ are\ closed\ properly,\r\n\ preventing\ potential\ memory\ leaks\ or\ unused\ resources.\r\n
comment4.params=
comment4.target=void\ accordingBPShouldThrowExceptionForInvalidDimensions()
comment4.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ throws\ an\ exception\ for\ invalid\ dimensions.\r\n
comment5.params=
comment5.target=void\ accordingBPShouldInitializePuzzleWithEndingMatrix()
comment5.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ initializes\ with\ a\ valid\ ending\ matrix.\r\n\ It\ should\ not\ throw\ any\ exceptions.\r\n
comment6.params=
comment6.target=void\ accordingBPShouldThrowExceptionForInvalidEndingMatrix()
comment6.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ throws\ an\ exception\ for\ an\ invalid\ ending\ matrix.\r\n
comment7.params=
comment7.target=void\ accordingBPShouldInitializePuzzleForValidMatrices()
comment7.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ initializes\ with\ valid\ starting\ and\ ending\ matrices.\r\n\ It\ should\ not\ throw\ any\ exceptions.\r\n
comment8.params=
comment8.target=void\ accordingBPShouldThrowExceptionForInvalidMatrices()
comment8.text=\r\n\ Tests\ if\ the\ Puzzle\ constructor\ throws\ an\ exception\ for\ invalid\ matrices.\r\n
comment9.params=
comment9.target=void\ accordingBPShouldAddTile()
comment9.text=\r\n\ Tests\ if\ a\ tile\ can\ be\ added\ to\ the\ puzzle\ at\ a\ valid\ position.\r\n
numComments=31
